generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                 Int                    @id @default(autoincrement())
  canonical_event_id Int
  eventname          String?                @db.VarChar(255)
  eventvenuename     String?                @db.VarChar(255)
  eventdescription   String?
  eventstartdatetime DateTime?              @db.Timestamptz(6)
  city               String?                @db.VarChar(100)
  state              String?                @db.VarChar(100)
  country            String?                @db.VarChar(100)
  geolocation        Json?
  metadata           Json?
  imagedata          Json?
  embedding          Unsupported("vector")?
  createdat          DateTime?              @default(now()) @db.Timestamp(6)
  canonical_events   canonical_events       @relation(fields: [canonical_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interactions_count interactions_count?
  user_event_actions user_event_actions[]
  user_event_status  user_event_status[]

  @@index([embedding])
  @@index([geolocation], map: "idx_events_geolocation")
  @@map("events")
}

model canonical_events {
  id                 Int                    @id @default(autoincrement())
  eventname          String?                @db.VarChar(255)
  eventvenue         String?                @db.VarChar(255)
  eventdescription   String?
  eventstartdatetime DateTime?              @db.Timestamptz(6)
  city               String?                @db.VarChar(100)
  state              String?                @db.VarChar(100)
  country            String?                @db.VarChar(100)
  rawdata            Json?
  embedding          Unsupported("vector")?
  createdat          DateTime?              @default(now()) @db.Timestamp(6)
  processedat        DateTime?              @db.Timestamp(6)
  events             Event[]
  raw_events         raw_events[]

  @@index([embedding])
  @@index([city], map: "idx_canonical_events_city")
  @@index([eventstartdatetime], map: "idx_canonical_events_eventstartdatetime")
}

model raw_events {
  id                 Int                    @id @default(autoincrement())
  source             String?                @db.VarChar(100)
  eventname          String?                @db.VarChar(255)
  eventvenue         String?                @db.VarChar(255)
  eventdescription   String?
  eventstartdatetime DateTime?              @db.Timestamptz(6)
  city               String?                @db.VarChar(100)
  state              String?                @db.VarChar(100)
  rawdata            Json?
  embedding          Unsupported("vector")?
  createdat          DateTime?              @default(now()) @db.Timestamp(6)
  processedat        DateTime?              @db.Timestamp(6)
  canonical_event_id Int?
  run_history_id     Int?
  canonical_events   canonical_events?      @relation(fields: [canonical_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([source], map: "idx_raw_events_source")
  @@index([city], map: "idx_raw_events_city")
  @@index([processedat], map: "idx_raw_events_processedat")
  @@index([embedding])
  @@index([canonical_event_id], map: "idx_raw_events_canonical_id")
  @@index([processedat], map: "idx_raw_events_processed")
  @@index([run_history_id], map: "idx_raw_events_run_history_id")
}

model user_event_actions {
  id          Int       @id @default(autoincrement())
  user_id     String    @db.VarChar(255)
  event_id    Int
  action_type String    @db.VarChar(50)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  events      Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([user_id])
}

model user_event_status {
  id                    Int       @id @default(autoincrement())
  user_id               String    @db.VarChar(255)
  event_id              Int
  opened_count          Int?      @default(0)
  shared                Boolean?  @default(false)
  saved                 Boolean?  @default(false)
  archived              Boolean?  @default(false)
  attending             Boolean?  @default(false)
  shared_count          Int?      @default(0)
  archived_count        Int?      @default(0)
  saved_count           Int?      @default(0)
  last_interaction_date DateTime? @default(now()) @db.Timestamptz(6)
  events                Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([user_id, event_id], map: "user_event_status_unique")
  @@index([event_id], map: "idx_user_event_status_event_id")
  @@index([last_interaction_date], map: "idx_user_event_status_last_interaction")
  @@index([user_id], map: "idx_user_event_status_user_id")
  @@map("user_event_status")
}

model User {
  id        String    @id @db.VarChar(36)
  createdAt DateTime? @default(dbgenerated("'2025-02-23 17:53:07.834876+00'::timestamp with time zone")) @map("created_at") @db.Timestamptz(6)
  synced    Boolean?  @default(false)

  @@map("users")
}

model interactions_count {
  id             Int       @id @default(autoincrement())
  saved_count    Int?      @default(0)
  shared_count   Int?      @default(0)
  attended_count Int?      @default(0)
  archived_count Int?      @default(0)
  last_updated   DateTime? @default(now()) @db.Timestamptz(6)
  events         Event     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model perplexity_query_archive {
  id             Int       @id @default(autoincrement())
  query_root     String
  input_location String
  last_used_at   DateTime? @default(now()) @db.Timestamp(6)
  created_at     DateTime? @default(now()) @db.Timestamp(6)

  @@unique([query_root, input_location])
  @@index([last_used_at], map: "idx_perplexity_query_archive_last_used")
  @@index([input_location], map: "idx_perplexity_query_archive_location")
}

model perplexity_search_term_catalog {
  search_term_id          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  target_city             String
  scope_type              String
  source_category         String
  root_search_term        String
  is_active               Boolean?                  @default(true)
  created_ts              DateTime?                 @default(now()) @db.Timestamp(6)
  last_run_ts             DateTime?                 @db.Timestamp(6)
  search_term_run_history search_term_run_history[]

  @@unique([target_city, root_search_term])
  @@index([is_active], map: "idx_search_term_catalog_active")
  @@index([target_city], map: "idx_search_term_catalog_city")
}

model recommended_events {
  id                  Int       @id @default(autoincrement())
  user_id             String    @db.VarChar(255)
  event_ids           Json
  last_updated        DateTime? @default(now()) @db.Timestamptz(6)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  recommendation_type String?

  @@index([user_id])
}

model search_term_run_history {
  run_id                         String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  search_term_id                 String?                         @db.Uuid
  run_ts                         DateTime?                       @default(now()) @db.Timestamp(6)
  date_range_start               DateTime?                       @db.Date
  date_range_end                 DateTime?                       @db.Date
  results_returned               Int?
  distinct_events                Int?
  inserted_events                Int?
  duplicates_seen                Int?
  runtime_ms                     Int?
  status                         String?
  error_message                  String?
  perplexity_search_term_catalog perplexity_search_term_catalog? @relation(fields: [search_term_id], references: [search_term_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([run_ts], map: "idx_search_term_run_history_run_ts")
  @@index([search_term_id], map: "idx_search_term_run_history_term_id")
}

model source_pplx_search_history {
  run_id                   Int                       @id @default(autoincrement())
  search_term_id           String?                   @db.Uuid
  run_ts                   DateTime?                 @default(now()) @db.Timestamp(6)
  date_range_start         DateTime?                 @db.Date
  date_range_end           DateTime?                 @db.Date
  results_returned         Int?
  distinct_events          Int?
  inserted_events          Int?
  duplicates_seen          Int?
  runtime_ms               Int?
  status                   String?
  error_message            String?
  source_pplx_search_terms source_pplx_search_terms? @relation(fields: [search_term_id], references: [search_term_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([run_ts], map: "idx_source_pplx_search_history_run_ts")
  @@index([search_term_id], map: "idx_source_pplx_search_history_term_id")
}

model source_pplx_search_terms {
  search_term_id              String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  target_location             String
  related_location_scope_type String
  related_location            String
  source_category             String
  root_search_term            String
  event_search_query          String                       @unique
  is_active                   Boolean?                     @default(true)
  created_ts                  DateTime?                    @default(now()) @db.Timestamp(6)
  last_run_ts                 DateTime?                    @db.Timestamp(6)
  source_category_id          String?
  source_pplx_search_history  source_pplx_search_history[]

  @@index([is_active], map: "idx_source_pplx_search_terms_active")
  @@index([source_category_id], map: "idx_source_pplx_search_terms_category_id")
  @@index([target_location], map: "idx_source_pplx_search_terms_location")
  @@index([root_search_term], map: "idx_source_pplx_search_terms_root")
}

model source_pplx_source_seed {
  id                   Int       @id @default(autoincrement())
  category_id          String    @unique
  category_name        String
  category_description String
  root_term_template   String
  examples             String?
  is_active            Boolean?  @default(true)
  created_ts           DateTime? @default(now()) @db.Timestamp(6)

  @@index([is_active], map: "idx_source_pplx_source_seed_active")
  @@index([category_id], map: "idx_source_pplx_source_seed_category_id")
}
